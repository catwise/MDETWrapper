#! /bin/tcsh -f

#===============================================================================================================================================================

set wrapperDir = $PWD
set startTime = `date '+%m/%d/%Y %H:%M:%S'`
echo 
echo Wrapper Started at:
echo $startTime
echo
echo This Wrapper will wrap around and run these 3 programs:
#echo This Wrapper will wrap around and run these 4 programs:
#echo 1\) fbt3 and PSFavr8
echo 2\) ICORE
#echo 3\) MDET
#echo 4\) WPHOTPMC
#echo ================================================================================================================
#echo WARNING\: Elijah is doing testing\/editing to this program \(Oct10 2017\). This script will not work propperly.
#echo ================================================================================================================

if ($# != 3) then
	#Error handling
	#Too many or too little arguments	
	echo "ERROR: not enough arguments:"
	echo "Parameters for wrapper must be in the order:"
	echo 1\) Option 1 or 2 \(1 == Input directory, 2 == Input list\)
	echo 2\) Input directory or list
	echo 3\) Output directory 
	echo "i.e. 'icore_wrapper_executable option InputDir/List OutputDir'" 
	echo 
	echo Exiting...
	exit 
#Option1
else if ($1 == 1) then
	set InputsDir = $2
	set OutputsDir = $3
	echo Inputs directory ==  $InputsDir
	echo Outputs directory == $OutputsDir
	echo "Are these the correct input and output directories? (y/n)"
	set userInput = $<
	
	#Error handling
	#if user input dir wrong
	if($userInput != "Y" && $userInput != "y") then
		echo Please execute program again with full Input Directory path as the 2nd parameter and the Ouput Directory path as your 3rd parameter  
		#TODO actually throw an error instead of just outputing to stdout... output to stderr
		echo
		echo Exiting...	
		exit
	endif
	#if directories dont exist, throw error
	if(! -d $InputsDir) then  
		echo ERROR: Input Directory $InputsDir doest not exist.
		echo	
		echo Exiting...
		exit
	endif
	if (! -d $OutputsDir) then
		echo ERROR: Output Directory $OutputsDir does not exist.
		echo	
		echo Exiting...
		exit
	endif	
	goto Option1

#Option2
else if ($1 == 2) then
	set InputsList = $2
        set OutputsDir = $3
        echo Inputs list ==  $InputsList
        echo Outputs directory == $OutputsDir
        echo "Is this the correct input list and output directory? (y/n)"
        set userInput = $<
 	
	#Error handling
        #if user input dir wrong
        if($userInput != "Y" && $userInput != "y") then
                echo Please execute program again with full Input List file as the 2nd parameter and the Ouput Directory path as your 3rd parameter
                #TODO actually throw an error instead of just outputing to stdout... output to stderr
                echo
                echo Exiting...
                exit
        endif
        #if directories dont exist, throw error
        if(! -f $InputsList) then
                echo ERROR: Input List file $InputsDir doest not exist.
                echo
                echo Exiting...
                exit
        endif
        if (! -d $OutputsDir) then
                echo ERROR: Output Directory $OutputsDir does not exist.
                echo
                echo Exiting...
                exit
        endif
	goto Option2

else
	#Error handling
	#option 1/2 not second parameter. program exits.
	echo ERROR option 1 or 2 not selected
	echo
	echo Exiting...
	exit
endif




Option1:
#===============================================================================================================================================================	
# links parent and wrapper dir to run "tcsh" and "source SORUCEME" in parent dir
# this assumes tcsh is installed
echo Creating temp files...
cd ..
tcsh & source SOURCEME && cd $wrapperDir

# loops through all of the tiles and executes icore

set FulldepthDir = ${InputsDir}/Fulldepth/

echo Wrapper now starting...

echo
echo

#===============================================================================================================================================================

echo 2\) ICORE programs now starting...

foreach RaRaRaDir ($FulldepthDir*/) #for each directory in FulldepthDir, get each RadecIDdir, run wrapper on RadecID tile
	
	foreach RadecIDDir ($RaRaRaDir*/)

		echo ===================================== start ICORE wrapper loop iteration =====================================

		set tempSize = `echo $RadecIDDir  | awk '{print length($0)}'`
		@ tempIndex = ($tempSize - 8)
		set RadecID = `echo $RadecIDDir | awk -v startIndex=$tempIndex '{print substr($0,startIndex,8)}'`
		set RaRaRa = `echo $RadecID | awk '{print substr($0,0,3)}'`
		echo Current Directory running Wrapper == $RadecIDDir
		echo "RaRaRa == "$RaRaRa
		echo "RadecID == "$RadecID
	
		echo "-------------------------------------------- start ICORE wrapper ---------------------------------------------"
		
		set INPUTdir = ${FulldepthDir}${RaRaRa}/${RadecID}/
		set OUTPUTdir = ${OutputsDir}/${RaRaRa}/${RadecID}/Full/
		
		echo Current Input Directory === $INPUTdir
		echo Current Output Directory === $OUTPUTdir
		mkdir -p $OUTPUTdir
		mkdir -p ${OUTPUTdir}/ProgramTerminalOutput/
		#===============================================================================================================================================
	
		# Copies icore_template to make an icore_coadd script for w1 and w2
		# NOTE: this assumes "band" variable is in the 4th line of icore_template
		cp  ${wrapperDir}/icore_template ${wrapperDir}/icore_coadd_w1
		cp  ${wrapperDir}/icore_template ${wrapperDir}/icore_coadd_w2
		sed -i --follow-symlinks '4s/1/2/' ${wrapperDir}/icore_coadd_w2
	
		# Sources/Runs Wrapper executables (one for band 1, other for band 2)
		# This should run concurrently/in parallel
		echo Running ICORE for $RadecID
	
		echo Running ICORE for bands 1 and 2 in PARALLEL
		source ${wrapperDir}/icore_coadd_w1 & 
		source ${wrapperDir}/icore_coadd_w2 & 
#		(source ${wrapperDir}/icore_coadd_w2 >& ${OUTPUTdir}/ProgramTerminalOutput/icore_w2_output.txt) & 
#		(source ${wrapperDir}/icore_coadd_w2 >& ${OUTPUTdir}/ProgramTerminalOutput/icore_w2_output.txt) & 
#		wait

	
		#Stops calling programs if number of scripts running is greater than number of threads on CPU
		while(`ps -ef | grep icore_coadd_w | wc -l` > 12)
                	#do nothing
        	end
			
		echo ICORE for $RadecID done!	
		echo "--------------------------------------------- end ICORE wrapper ----------------------------------------------"
		
		echo ====================================== end ICORE wrapper loop iteration ======================================
	end
end
#===============================================================================================================================================================

echo waiting... for background processes to finish
wait
echo ICORE wrapper finished!
echo

goto Done

Option2:
echo HelloWorld
goto Done


Done:		
# Deletes and cleans up files
cd $wrapperDir
echo Deleting Wrapper temp files...
source icore_cleanup_wrapper
echo Done deleting!


#===============================================================================================================================================================
echo Wrapper finished!
set endTime = `date '+%m/%d/%Y %H:%M:%S'`
echo
echo Wrapper Ended at:
echo $endTime
echo
